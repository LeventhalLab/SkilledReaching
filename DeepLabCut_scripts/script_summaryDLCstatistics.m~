% script_summaryDLCstatistics

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% set up the figures for each type of plot
% mean p heat maps
mean_p_figProps.m = 4;
mean_p_figProps.n = 2;

mean_p_figProps.panelWidth = ones(mean_p_figProps.n,1) * 9;
mean_p_figProps.panelHeight = ones(mean_p_figProps.m,1) * 5;

mean_p_figProps.colSpacing = ones(mean_p_figProps.n-1,1) * 0.5;
mean_p_figProps.rowSpacing = ones(mean_p_figProps.m-1,1) * 1;

mean_p_figProps.width = 8.5 * 2.54;
mean_p_figProps.height = 11 * 2.54;

mean_p_figProps.topMargin = 2;
mean_p_figProps.leftMargin = 2.54;

mean_p_timeLimits = [-0.5,2];

% 3D/2D trajectories for individual trials, and mean trajectories
trajectory_figProps.m = 4;
mean_p_figProps.n = 2;

trajectory_figProps.panelWidth = ones(mean_p_figProps.n,1) * 9;
trajectory_figProps.panelHeight = ones(mean_p_figProps.m,1) * 5;

trajectory_figProps.colSpacing = ones(mean_p_figProps.n-1,1) * 0.5;
trajectory_figProps.rowSpacing = ones(mean_p_figProps.m-1,1) * 1;

trajectory_figProps.width = 8.5 * 2.54;
mean_p_figProps.height = 11 * 2.54;

trajectory_figProps.topMargin = 2;
trajectory_figProps.leftMargin = 2.54;

trajectory_timeLimits = [-0.5,2];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bp_to_group = {{'mcp','pawdorsum'},{'pip'},{'digit'}};

labeledBodypartsFolder = '/Volumes/Tbolt_01/Skilled Reaching/DLC output';
xlDir = '/Users/dan/Box Sync/Leventhal Lab/Skilled Reaching Project/Scoring Sheets';
csvfname = fullfile(xlDir,'rat_info_pawtracking_DL.csv');
ratInfo = readtable(csvfname);
ratInfo_IDs = [ratInfo.ratID];

ratFolders = findRatFolders(labeledBodypartsFolder);
numRatFolders = length(ratFolders);

for i_rat = 1 : numRatFolders
    
    ratID = ratFolders{i_rat};
    ratIDnum = str2double(ratID(2:end));
    
    ratInfo_idx = find(ratInfo_IDs == ratIDnum);
    if isempty(ratInfo_idx)
        error('no entry in ratInfo structure for rat %d\n',C{1});
    end
    
    if istable(ratInfo)
        thisRatInfo = ratInfo(ratInfo_idx,:);
    else
        thisRatInfo = ratInfo(ratInfo_idx);
    end
    pawPref = thisRatInfo.pawPref;
    
    ratRootFolder = fullfile(labeledBodypartsFolder,ratID);
    
    cd(ratRootFolder);
    DLCstatsFolder = fullfile(ratRootFolder,[ratID '_DLCstats']);
    
    if ~exist(DLCstatsFolder,'dir')
        mkdir(DLCstatsFolder);
    end
    
    sessionDirectories = listFolders([ratID '_2*']);   % all were recorded after the year 2000
    numSessions = length(sessionDirectories);
    
    numSessionPages = 0;
    for iSession = 1 : numSessions
    
        C = textscan(sessionDirectories{iSession},[ratID '_%8c']);
        sessionDate = C{1};
    
        fullSessionDir = fullfile(ratRootFolder,sessionDirectories{iSession});
        
        cd(fullSessionDir);
        
        sessionSummaryName = [ratID '_' sessionDate '_kinematicsSummary.mat'];
        
        try
            load(sessionSummaryName);
        catch
%             keyboard
            fprintf('no session summary found for %s\n', sessionDirectories{iSession});
            continue
        end
        
        matList = dir([ratID '_*_3dtrajectory.mat']);
        numTrials = length(matList);
        
%         try
%         load(matList(1).name);
%         catch
%             keyboard
%         end
        numFrames = size(allTrajectories, 1);
        t = linspace(frameTimeLimits(1),frameTimeLimits(2), numFrames);
        all_p_direct = zeros(size(direct_p,1),size(direct_p,2),numTrials);
        all_p_mirror = zeros(size(mirror_p,1),size(mirror_p,2),numTrials);
        
        currentTrialList = zeros(trajectory_figProps.m,1);
        for iTrial = 1 : numTrials
            
            load(matList(iTrial).name);
            
            all_p_direct(:,:,iTrial) = direct_p;
            all_p_mirror(:,:,iTrial) = mirror_p;
            
            [trial_rowNum, numTrialPages] = getRow(iTrial, trajectory_figProps.m);
            num_bp = size(allTrajectories,3);
            trajectory_h_figAxis = zeros(num_bp,1);
            trajectory_h_fig = zeros(num_bp,1);
            trajectory_h_axes = cell(num_bp,1);
            for i_bpGroup = 1 : length(i_bpGroup)
                
                if trial_rowNum == 1
                    [trajectory_h_fig(i_bpGroup),trajectory_h_axes{i_bpGroup}] = createFigPanels5(trajectory_figProps);
                    trajectory_h_figAxis(i_bpGroup) = createFigAxes(mean_p_h_fig);
                end
                
                bp_idx = [];
                for i_bpLabel = 1 : length(bp_to_group{i_bpGroup})
                    bp_idx = [bp_idx, find(contains(bodyparts,bp_to_group{i_bpGroup}{i_bpLabel}))];
                    
                end
                
                currentTrialList(trial_rowNum) = trialNumbers(iTrial);
                curTrajectory = squeeze(allTrajectories(:,:,i_bp,iTrial));
            % WORKING HERE - NEED TO CREATE SUMMARY FIGURES OF PAW
            % LOCATIONS, FIGURE OUT WHICH BODYPARTS WILL BE BEST FOR
            % OVERALL TRACKING - PLOT 3D AND INDIVIDUAL TRAJECTORIES ACROSS
            % SESSIONS
            
        end
        
        mean_p_direct = mean(all_p_direct,3);
        mean_p_mirror = mean(all_p_mirror,3);
        
%         rowNum = mod(iSession, mean_p_figProps.m);
%         if rowNum == 0
%             rowNum = mean_p_figProps.m;
%         end

        [rowNum, numSessionPages] = getRow(iSession, mean_p_figProps.m);
        if rowNum == 1
            [mean_p_h_fig,mean_p_h_axes] = createFigPanels5(mean_p_figProps);
            currentSessionList = {[ratID '\_' sessionDate]};
            mean_p_h_figAxis = createFigAxes(mean_p_h_fig);
        else
            currentSessionList{rowNum} = [ratID '\_' sessionDate];
        end
        
        axes(mean_p_h_axes(rowNum,1));
        imagesc(t, 1:length(bodyparts), mean_p_direct)
        set(gca,'clim',[0 1],'xlim',mean_p_timeLimits);
        set(gca,'ytick',1:16,'yticklabel',bodyparts);
        if rowNum == 1
            title('direct view');
        end
        
        axes(mean_p_h_axes(rowNum,2));
        imagesc(t, 1:length(bodyparts), mean_p_mirror)
        set(gca,'clim',[0 1],'xlim',mean_p_timeLimits,'ytick',[]);
        if rowNum == 1
            title('mirror view');
        end
        
        if rowNum == mean_p_figProps.m || iSession == numSessions
            textString{1} = 'mean p-values for DLC point detection';
            textString{2} = sprintf('sessions: %s', currentSessionList{1});
            for ii = 2 : rowNum
                textString{2} = sprintf('%s, %s', textString{2},currentSessionList{ii});
            end
            
            axes(mean_p_h_figAxis);
            text(mean_p_figProps.leftMargin,mean_p_figProps.height-0.5,textString,'units','centimeters');
            
%             numSessionPages = numSessionPages + 1;
            
            mean_p_summaryName = sprintf('%s_mean_p_heatmaps_%02d',ratID,numSessionPages);
            
            mean_p_summaryName = fullfile(DLCstatsFolder,mean_p_summaryName);
            mean_p_figName = [mean_p_summaryName '.fig'];
            mean_p_pdfName = [mean_p_summaryName '.pdf'];
            
            print(mean_p_pdfName, '-dpdf');
            savefig(mean_p_figName);
            
            close(mean_p_h_fig);
        end
%         set(gca,'ytick',1:16,'yticklabel',bodyparts);

        
            
        % TO DO:
        %   1) set up a sheet to make a mean_p heat map for the direct and
        %   mirror views for each session
        %   3) make at least one colorbar
    end
    
end
% mean p-value as a function of frame number