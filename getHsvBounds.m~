function hsvBounds=getHsvBounds(pixelBounds,step)
    [videoName,videoPath] = uigetfile('*.avi');
    videoFile = fullfile(videoPath,videoName);
    video = VideoReader(videoFile);
    hsvBounds = pixelBounds;
    
    fields = fieldnames(pixelBounds);
    for j=1:size(fields,1)
        disp(['Mark paw for "',fields{j},'"...']);
        hBounds = zeros(size(1:step:video.NumberOfFrames,1),2);
        sBounds = hBounds;
        vBounds = hBounds;

        count = 1;
        for i=1:step:video.NumberOfFrames
            im = read(video,i);
            coords = pixelBounds.(fields{j}); % x1 y1 x2 y2
            im = im(coords(2):coords(4),coords(1):coords(3),:);
            h_im = imshow(im);
            mask = createMask(imfreehand,h_im); %imrect
            mask = imfill(mask,'holes');
            close;
            
            if(~isempty(mask(mask>0)))
                hsv = rgb2hsv(im);
                h = hsv(:,:,1);
                s = hsv(:,:,2);
                v = hsv(:,:,3);

                % apply mask
                h = h.*mask;
                s = s.*mask;
                v = v.*mask;

                % remove zeros and put into a single dimension array
                hRmZero = h(h>0);
                sRmZero = s(s>0);
                vRmZero = v(v>0);

                if(count == 1)
                    hMin = min(h);
                    hMax = max(h);
                    sMin = min(s);
                    sMax = max(s);
                    vMin = min(v);
                    vMax = max(v);
                else
                    if(min(h) < hMin)
                        hMin = min(h);
                    end
                end
            end
            

            % create bounds +/- one standard deviation
%             hBounds(count,:) = [mean(hRmZero)-std(hRmZero),mean(hRmZero)+std(hRmZero)];
%             sBounds(count,:) = [mean(sRmZero)-std(sRmZero),mean(sRmZero)+std(sRmZero)];
%             vBounds(count,:) = [mean(vRmZero)-std(vRmZero),mean(vRmZero)+std(vRmZero)];

            count = count+1;
        end

        hVals = hBounds(any(~isnan(hBounds),2),:);
        sVals = sBounds(any(~isnan(sBounds),2),:);
        vVals = vBounds(any(~isnan(vBounds),2),:);

        hsvBounds.(fields{j}) = [mean(hVals),mean(sVals),mean(vVals)];
    end
end